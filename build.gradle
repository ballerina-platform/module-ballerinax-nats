/*
 * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id "com.github.spotbugs" version "5.0.14"
    id "com.github.johnrengelman.shadow" version "8.1.1"
    id "de.undercouch.download" version "5.4.0"
    id "net.researchgate.release" version "2.8.0"
}

ext.ballerinaLangVersion = project.ballerinaLangVersion
ext.puppycrawlCheckstyleVersion = project.puppycrawlCheckstyleVersion
ext.slf4jVersion = "1.7.30"
ext.natsVersion = project.natsVersion
ext.stdlibCryptoVersion = project.stdlibCryptoVersion
ext.stdlibLogVersion = project.stdlibLogVersion
ext.stdlibTimeVersion = project.stdlibTimeVersion
ext.stdlibIoVersion = project.stdlibIoVersion

allprojects {
    group = project.group
    version = project.version

    apply plugin: 'jacoco'
    apply plugin: 'maven-publish'

    repositories {
        mavenLocal()
        maven {
            url = 'https://maven.wso2.org/nexus/content/repositories/releases/'
        }

        maven {
            url = 'https://mvnrepository.com/artifact/org.testng/testng'
        }

        maven {
            url = 'https://maven.wso2.org/nexus/content/groups/wso2-public/'
        }

        maven {
            url = 'https://repo.maven.apache.org/maven2'
        }

        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/*'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
    }

    ext {
        snapshotVersion= '-SNAPSHOT'
        timestampedVersionRegex = '.*-\\d{8}-\\d{6}-\\w.*\$'
    }
}

subprojects {

    configurations {
        ballerinaStdLibs
        jbalTools
    }
    dependencies {
        /* JBallerina Tools */
        jbalTools ("org.ballerinalang:jballerina-tools:${ballerinaLangVersion}") {
            transitive = false
        }

        /* Standard libraries */
        ballerinaStdLibs "io.ballerina.stdlib:log-ballerina:${stdlibLogVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:crypto-ballerina:${stdlibCryptoVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:time-ballerina:${stdlibTimeVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:io-ballerina:${stdlibIoVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:constraint-ballerina:${stdlibConstraintVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:observe-ballerina:${observeVersion}"
        ballerinaStdLibs "io.ballerina:observe-ballerina:${observeInternalVersion}"
    }
}
def moduleVersion = project.version
if (moduleVersion.indexOf('-') != -1) {
    moduleVersion = moduleVersion.replace("-SNAPSHOT", "")
}

release {
    failOnPublishNeeded = false
    failOnSnapshotDependencies = true

    buildTasks = ['build']
    versionPropertyFile = 'gradle.properties'
    tagTemplate = 'v$version'

    git {
        requireBranch = "release-${moduleVersion}"
        pushToRemote = 'origin'
    }
}

task build {
    dependsOn('nats-ballerina:build')
    dependsOn('nats-ballerina-tests:test')
}

task startNatsServers() {
    doLast {
        if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
            def stdOut = new ByteArrayOutputStream()
            exec {
                commandLine 'sh', '-c', "docker ps --filter name=server_nats-tls_1"
                standardOutput = stdOut
            }
            if (!stdOut.toString().contains("server_nats-tls_1")) {
                println "Starting NATS Basic server."
                exec {
                    commandLine 'sh', '-c', "docker-compose -f nats-server/server/docker-compose.yaml up -d"
                    standardOutput = stdOut
                }
                println stdOut.toString()
                sleep(10 * 1000)
            } else {
                println "NATS Basic server is already started."
            }
            // Get the IP address of the container
            stdOut.reset()
            exec {
                commandLine 'sh', '-c', "docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $containerId"
                standardOutput = stdOut
            }
            def ipAddress = stdOut.toString().trim()
            println "NATS Basic server IP address: $ipAddress"
        }
    }
}

task stopNatsServers() {
    doLast {
        if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
            def stdOut = new ByteArrayOutputStream()
            exec {
                commandLine 'sh', '-c', "docker ps --filter name=server_nats-tls_1"
                standardOutput = stdOut
            }
            if (stdOut.toString().contains("server_nats-tls_1")) {
                println "Stopping NATS server."
                exec {
                    commandLine 'sh', '-c', "docker-compose -f nats-server/server/docker-compose.yaml rm -svf"
                    standardOutput = stdOut
                }
                println stdOut.toString()
                sleep(5 * 1000)
            } else {
                println "NATS server is not started."
            }
        }
    }
}

build.dependsOn(startNatsServers)
build.finalizedBy(stopNatsServers)
