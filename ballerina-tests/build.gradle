/*
 * Copyright (c) 2023, WSO2 LLC. (https://www.wso2.com) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'groovy'
}

description = 'Ballerina - NATS Tests'

def packageName = "nats"
def packageOrg = "ballerinax"
def tomlVersion = stripBallerinaExtensionVersion("${project.version}")
def ballerinaTomlFilePlaceHolder = new File("${project.rootDir}/build-config/resources/BallerinaTest.toml")
def ballerinaTomlFile = new File("$project.projectDir/Ballerina.toml")
def ballerinaDist = "${project.rootDir}/target/ballerina-runtime"
def distributionBinPath =  "${ballerinaDist}/bin"
def testCoverageParam = "--code-coverage --coverage-format=xml --includes=io.ballerina.stdlib.nats.*:ballerina.nats*"

def stripBallerinaExtensionVersion(String extVersion) {
    if (extVersion.matches(project.ext.timestampedVersionRegex)) {
        def splitVersion = extVersion.split('-');
        if (splitVersion.length > 3) {
            def strippedValues = splitVersion[0..-4]
            return strippedValues.join('-')
        } else {
            return extVersion
        }
    } else {
        return extVersion.replace("${project.ext.snapshotVersion}", "")
    }
}

task updateTomlFiles {
    doLast {
        def newBallerinaToml = ballerinaTomlFilePlaceHolder.text.replace("@toml.version@", tomlVersion)
        ballerinaTomlFile.text = newBallerinaToml
    }
}

task commitTomlFiles {
    doLast {
        project.exec {
            ignoreExitValue true
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "git commit -m \"[Automated] Update the native jar versions\" Ballerina.toml Dependencies.toml"
            } else {
                commandLine 'sh', '-c', "git commit -m '[Automated] Update the native jar versions' Ballerina.toml Dependencies.toml"
            }
        }
    }
}

def groupParams = ""
def disableGroups = ""
def debugParams = ""
def balJavaDebugParam = ""
def graalvmFlag = ""
def testParams = ""

task initializeVariables {
    if (project.hasProperty("groups")) {
        groupParams = "--groups ${project.findProperty('groups')}"
    }
    if (project.hasProperty("disable")) {
        disableGroups = "--disable-groups ${project.findProperty("disable")}"
    }
    if (project.hasProperty("debug")) {
        debugParams = "--debug ${project.findProperty("debug")}"
    }
    if (project.hasProperty("balJavaDebug")) {
        balJavaDebugParam = "BAL_JAVA_DEBUG=${project.findProperty("balJavaDebug")}"
    }
    if (project.hasProperty('balGraalVMTest')) {
        graalvmFlag = '--graalvm'
    }

    gradle.taskGraph.whenReady { graph ->
        if (graph.hasTask(":${packageName}-ballerina:test")) {
            if (!project.hasProperty('balGraalVMTest')) {
                testParams = "${testCoverageParam}"
            }
        } else {
            testParams = "--skip-tests"
        }
    }
}

task ballerinaTest {
    dependsOn(":${packageName}-ballerina:build")
    dependsOn(updateTomlFiles)
    dependsOn(initializeVariables)
    finalizedBy(commitTomlFiles)

    doLast {
        exec {
            workingDir project.projectDir
            environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "${balJavaDebugParam} ${distributionBinPath}/bal.bat test ${graalvmFlag} ${testParams} --offline ${groupParams} ${disableGroups} ${debugParams} && exit %%ERRORLEVEL%%"
            } else {
                commandLine 'sh', '-c', "${balJavaDebugParam} ${distributionBinPath}/bal test ${graalvmFlag} ${testParams} --offline ${groupParams} ${disableGroups} ${debugParams}"
            }
        }
    }
}

test {
    dependsOn(ballerinaTest)
}

clean {
    delete("${projectDir}/target")
}


task startNatsServersForTests() {
    doLast {
        if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
            def stdOut = new ByteArrayOutputStream()
            exec {
                commandLine 'sh', '-c', "docker ps --filter name=server_nats-tls_1"
                standardOutput = stdOut
            }
            if (!stdOut.toString().contains("server_nats-tls_1")) {
                println "Starting NATS Basic server."
                exec {
                    commandLine 'sh', '-c', "docker-compose -f tests/server/docker-compose.yaml up -d"
                    standardOutput = stdOut
                }
                println stdOut.toString()
                sleep(20 * 1000)
                exec {
                    commandLine 'sh', '-c', "docker ps --filter name=server_nats-tls_1"
                    standardOutput = stdOut
                }
                if (!stdOut.toString().contains("server_nats-tls_1")) {
                    println "tls server didn't start after 20 seconds."
                }
            } else {
                println "NATS Basic server is already started."
            }
        }
    }
}

task stopNatsServersForTests() {
    doLast {
        if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
            def stdOut = new ByteArrayOutputStream()
            exec {
                commandLine 'sh', '-c', "docker ps --filter name=server_nats-tls_1"
                standardOutput = stdOut
            }
            if (stdOut.toString().contains("server_nats-tls_1")) {
                println "Stopping NATS server."
                exec {
                    commandLine 'sh', '-c', "docker-compose -f tests/server/docker-compose.yaml rm -svf"
                    standardOutput = stdOut
                }
                println stdOut.toString()
                sleep(5 * 1000)
            } else {
                println "NATS server is not started."
            }
        }
    }
}

build.dependsOn startNatsServersForTests
test.dependsOn startNatsServersForTests
build.dependsOn ":${packageName}-ballerina:build"
build.dependsOn ":${packageName}-compiler-plugin:build"
test.dependsOn ":${packageName}-ballerina:build"
test.dependsOn ":${packageName}-compiler-plugin:build"
build.finalizedBy stopNatsServersForTests
test.finalizedBy stopNatsServersForTests

publishToMavenLocal.dependsOn build
publish.dependsOn build
